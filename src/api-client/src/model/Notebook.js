/**
 * NoteTaker API
 * API for my React practice project
 *
 * The version of the OpenAPI document: v1
 * Contact: canthavemy@email.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Note from './Note';
import NotebookColor from './NotebookColor';
import User from './User';

/**
 * The Notebook model module.
 * @module model/Notebook
 * @version v1
 */
class Notebook {
    /**
     * Constructs a new <code>Notebook</code>.
     * @alias module:model/Notebook
     * @param name {String} 
     * @param user {module:model/User} 
     */
    constructor(name, user) { 
        
        Notebook.initialize(this, name, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, user) { 
        obj['name'] = name;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Notebook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Notebook} obj Optional instance to populate.
     * @return {module:model/Notebook} The populated <code>Notebook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notebook();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = NotebookColor.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], [Note]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Notebook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Notebook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Notebook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        if (data['notes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notes'])) {
                throw new Error("Expected the field `notes` to be an array in the JSON data but got " + data['notes']);
            }
            // validate the optional field `notes` (array)
            for (const item of data['notes']) {
                Note.validateJSON(item);
            };
        }

        return true;
    }


}

Notebook.RequiredProperties = ["name", "user"];

/**
 * @member {Number} id
 */
Notebook.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Notebook.prototype['name'] = undefined;

/**
 * @member {module:model/NotebookColor} color
 */
Notebook.prototype['color'] = undefined;

/**
 * @member {Number} userId
 */
Notebook.prototype['userId'] = undefined;

/**
 * @member {module:model/User} user
 */
Notebook.prototype['user'] = undefined;

/**
 * @member {Array.<module:model/Note>} notes
 */
Notebook.prototype['notes'] = undefined;






export default Notebook;

