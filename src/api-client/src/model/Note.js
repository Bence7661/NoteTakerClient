/**
 * NoteTaker API
 * API for my React practice project
 *
 * The version of the OpenAPI document: v1
 * Contact: canthavemy@email.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Notebook from './Notebook';

/**
 * The Note model module.
 * @module model/Note
 * @version v1
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * @alias module:model/Note
     * @param body {String} 
     * @param notebook {module:model/Notebook} 
     */
    constructor(body, notebook) { 
        
        Note.initialize(this, body, notebook);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, notebook) { 
        obj['body'] = body;
        obj['notebook'] = notebook;
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Note} obj Optional instance to populate.
     * @return {module:model/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('notebookId')) {
                obj['notebookId'] = ApiClient.convertToType(data['notebookId'], 'Number');
            }
            if (data.hasOwnProperty('notebook')) {
                obj['notebook'] = Notebook.constructFromObject(data['notebook']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Note.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // validate the optional field `notebook`
        if (data['notebook']) { // data not null
          Notebook.validateJSON(data['notebook']);
        }

        return true;
    }


}

Note.RequiredProperties = ["body", "notebook"];

/**
 * @member {Number} id
 */
Note.prototype['id'] = undefined;

/**
 * @member {String} title
 */
Note.prototype['title'] = undefined;

/**
 * @member {String} body
 */
Note.prototype['body'] = undefined;

/**
 * @member {Number} notebookId
 */
Note.prototype['notebookId'] = undefined;

/**
 * @member {module:model/Notebook} notebook
 */
Note.prototype['notebook'] = undefined;






export default Note;

