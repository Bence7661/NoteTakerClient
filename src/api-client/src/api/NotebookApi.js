/**
 * NoteTaker API
 * API for my React practice project
 *
 * The version of the OpenAPI document: v1
 * Contact: canthavemy@email.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Notebook from '../model/Notebook';

/**
* Notebook service.
* @module api/NotebookApi
* @version v1
*/
export default class NotebookApi {

    /**
    * Constructs a new NotebookApi. 
    * @alias module:api/NotebookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiNotebookGet operation.
     * @callback module:api/NotebookApi~apiNotebookGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notebook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all entities.
     * @param {module:api/NotebookApi~apiNotebookGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Notebook>}
     */
    apiNotebookGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [Notebook];
      return this.apiClient.callApi(
        '/api/Notebook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotebookIdDelete operation.
     * @callback module:api/NotebookApi~apiNotebookIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an entity by Id.
     * @param {Number} id Entity Id.
     * @param {module:api/NotebookApi~apiNotebookIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNotebookIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotebookIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Notebook/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotebookIdGet operation.
     * @callback module:api/NotebookApi~apiNotebookIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notebook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an entity by Id.
     * @param {Number} id Entity ID.
     * @param {module:api/NotebookApi~apiNotebookIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notebook}
     */
    apiNotebookIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotebookIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Notebook;
      return this.apiClient.callApi(
        '/api/Notebook/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotebookPost operation.
     * @callback module:api/NotebookApi~apiNotebookPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notebook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new entity.
     * @param {Object} opts Optional parameters
     * @param {module:model/Notebook} [notebook] Entity to create.
     * @param {module:api/NotebookApi~apiNotebookPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notebook}
     */
    apiNotebookPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['notebook'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Notebook;
      return this.apiClient.callApi(
        '/api/Notebook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
